前端性能优化
  减少 HTTP请求数
    合理设置 HTTP缓存
    资源合并与压缩 精简Javascript和CSS，将外部的脚本、样式进行合并，多个合为一个，用相应的工具进行压缩
    CSS Sprites 将多个图片合并成一张大图，通过background-position来精确设置显示图片的某一部分
    Inline Images 对于小的图片采用base64编码，将图片嵌入到到页面或 CSS中
    Lazy Load Images（图片懒加载）
  将外部脚本置底或异步执行脚本  防止脚本的加载和执行阻塞页面的渲染
  将 CSS放在 HEAD中
    如果将 CSS放在其他地方比如 BODY中，则浏览器有可能还未下载和解析到 CSS就已经开始渲染页面了，这就导致页面由无 CSS状态跳转到 CSS状态，用户体验比较糟糕。除此之外，有些浏览器会在 CSS下载完成后才开始渲染页面，如果CSS放在靠下的位置则会导致浏览器将渲染时间推迟。
  异步请求 Callback
    直接将回调函数写在script标签内会增加了页面首次加载的负担，推迟了 DOMLoaded和window.onload 事件的触发时机
  避免重复的资源请求

  减少对DOM的操作 
    DOM操作应该是脚本中最耗性能的一类操作
    不要再循环中对DOM进行操作，应该先利用变量将循环的结果储存起来，再最后使用结果进行DOM操作。
    DOM操作会涉及到浏览器的 Reflow和Repaint ，这些都是需要消耗资源的
  慎用 with 避免使用 eval和 Function

  使用json格式来进行数据交换，因为JSON是一种轻量级的数据交换格式，采用完全独立于语言的文本格式，是理想的数据交换格式。同时，JSON是 JavaScript原生格式，这意味着在 JavaScript 中处理 JSON数据不需要任何特殊的 API 或工具包。

  注意使用css选择器，建议使用ID，类选择器，避免属性，后代选择器，通用选择器。组合选择器，优化最右边的关键选择器。浏览器解析选择器是从右到左的方式


