九大经典排序算法

插入排序
	基本原理：通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。
	算法描述：
		从第一个元素开始，该元素可以认为已经被排序；
		取出下一个元素，在已经排序的元素序列中从后向前扫描；
		如果该元素（已排序）大于新元素，将该元素移到下一位置；
		重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；
		将新元素插入到该位置后；
		重复步骤2~5。
	代码实现：
		function insertionSort(arr) {
    		var len = arr.length;
    		var preIndex, current;
    		for (var i = 1; i < len; i++) {
    		    preIndex = i - 1;
    		    current = arr[i];
    		    while (preIndex >= 0 && arr[preIndex] > current) {
    		        arr[preIndex + 1] = arr[preIndex];
    		        preIndex--;
    		    }
    		    arr[preIndex + 1] = current;
    		}
    		return arr;
		}
	算法分析：
		是稳定的排序（stable sort）和就地排序（In-place sort）
		最优复杂度：当输入数组就是排好序的时候，复杂度为O(n)，而快速排序在这种情况下会产生O(n^2)的复杂度。
		最差复杂度：当输入数组为倒序时，复杂度为O(n^2)
		插入排序比较适合用于“少量元素的数组”。
		其实插入排序的复杂度和逆序对的个数一样，当数组倒序时，逆序对的个数为n(n-1)/2，因此插入排序复杂度为O(n^2)。

冒泡排序
	基本原理：重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换
	算法描述：
		比较相邻的元素。如果第一个比第二个大，就交换它们两个；
		对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；
		针对所有的元素重复以上的步骤，除了最后一个；
		重复步骤1~3，直到排序完成。
	代码实现：
		function bubbleSort(arr) {
		    var len = arr.length;
		    for (var i = 0; i < len - 1; i++) {
		        for (var j = 0; j < len - 1 - i; j++) {
		            if (arr[j] > arr[j+1]) {        // 相邻元素两两对比
		                var temp = arr[j+1];        // 元素交换
		                arr[j+1] = arr[j];
		                arr[j] = temp;
		            }
		        }
		    }
		    return arr;
		}
	算法分析：
		stable sort、In-place sort
		最坏运行时间：O(n^2)	最佳运行时间：O(n^2)  空间复杂度：O(1)

选择排序：
	基本原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。 
	代码实现：
		function selectionSort(arr) {
		    var len = arr.length;
		    var minIndex, temp;
		    for (var i = 0; i < len - 1; i++) {
		        minIndex = i;
		        for (var j = i + 1; j < len; j++) {
		            if (arr[j] < arr[minIndex]) {     // 寻找最小的数
		                minIndex = j;                 // 将最小数的索引保存
		            }
		        }
		        temp = arr[i];
		        arr[i] = arr[minIndex];
		        arr[minIndex] = temp;
		    }
		    return arr;
		} 	
	算法分析：
		In-place sort，unstable sort
		最好最坏的时间复杂度都为O(n^2)	空间复杂度O(1)

归并排序
	基本原理：采用分治法（Divide and Conquer），将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序
	算法描述：
		把长度为n的输入序列分成两个长度为n/2的子序列；
		对这两个子序列分别采用归并排序；
		将两个排序好的子序列合并成一个最终的排序序列
	代码实现：
		function mergeSort(arr) {  // 采用自上而下的递归方法
		    var len = arr.length;
		    if (len < 2) {
		        return arr;
		    }
		    var middle = Math.floor(len / 2),
		        left = arr.slice(0, middle),
		        right = arr.slice(middle);
		    return merge(mergeSort(left), mergeSort(right));
		}
		 
		function merge(left, right) {
		    var result = [];
		 
		    while (left.length>0 && right.length>0) {
		        if (left[0] <= right[0]) {
		            result.push(left.shift());
		        } else {
		            result.push(right.shift());
		        }
		    }
		 
		    while (left.length)
		        result.push(left.shift());
		 
		    while (right.length)
		        result.push(right.shift());
		 
		    return result;
		}
	算法分析：
		stable sort、Out-place sort
		最坏最好情况下的时间复杂度都为 O(nlog2(n))   空间复杂度 O(n)

快速排序
	基本原理：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序
	算法描述：
		从数列中挑出一个元素，称为 “基准”（pivot）；
		重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；
		递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。
	代码实现：
		function quickSort(arr, left, right) {
		    var len = arr.length,
		        partitionIndex,
		        left = typeof left != 'number' ? 0 : left,
		        right = typeof right != 'number' ? len - 1 : right;
		 
		    if (left < right) {
		        partitionIndex = partition(arr, left, right);
		        quickSort(arr, left, partitionIndex-1);
		        quickSort(arr, partitionIndex+1, right);
		    }
		    return arr;
		}
		 
		function partition(arr, left ,right) {     // 分区操作
		    var pivot = left,                      // 设定基准值（pivot）
		        index = pivot + 1;
		    for (var i = index; i <= right; i++) {
		        if (arr[i] < arr[pivot]) {
		            swap(arr, i, index);
		            index++;
		        }       
		    }
		    swap(arr, pivot, index - 1);
		    return index-1;
		}
		 
		function swap(arr, i, j) {
		    var temp = arr[i];
		    arr[i] = arr[j];
		    arr[j] = temp;
		}
	算法分析：
		unstable sort、In-place sort
		最坏运行时间：O(n^2)	最佳运行时间：O(nlog2(n))
		空间复杂度 O(log2(n))

堆排序：
	基本原理：将无序序列调整为一个堆，就可以找出这个歌序列的最大（小）值，然后将找出的这个值交换到序列的最后或最前，这样，有序序列的关键字增加1个，无序序列的关键字减少1个，对新的无序序列重复这样的操作，就实现了排序。
	算法描述：
		将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区；
		将堆顶元素R[1]与最后一个元素R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足R[1,2…n-1]<=R[n]；
		由于交换后新的堆顶R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，然后再次将R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)。不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完成。
	算法分析：
		unstable sort、In-place sort
		最优时间：O(nlog2(n))	最差时间：O(nlog2(n))
		空间复杂度 O(1)

计数排序
	基本原理：将输入的数据值转化为键存储在额外开辟的数组空间中。 作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。
	算法描述：
		找出待排序的数组中最大和最小的元素；
		统计数组中每个值为i的元素出现的次数，存入数组C的第i项；
		对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）；
		反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1。
	代码实现：
		function countingSort(arr, maxValue) {
		    var bucket = new Array(maxValue + 1),
		        sortedIndex = 0;
		        arrLen = arr.length,
		        bucketLen = maxValue + 1;
		 
		    for (var i = 0; i < arrLen; i++) {
		        if (!bucket[arr[i]]) {
		            bucket[arr[i]] = 0;
		        }
		        bucket[arr[i]]++;
		    }
		 
		    for (var j = 0; j < bucketLen; j++) {
		        while(bucket[j] > 0) {
		            arr[sortedIndex++] = j;
		            bucket[j]--;
		        }
		    }
		 
		    return arr;
		}
	算法分析：
		stable sort、out-place sort
		当输入的元素是 n 个 0到 k 之间的整数时，时间复杂度是O(n+k)，空间复杂度也是O(n+k)

桶排序：
	基本原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排）
	算法描述：
		设置一个定量的数组当作空桶；
		遍历输入数据，并且把数据一个一个放到对应的桶里去；
		对每个不是空的桶进行排序；
		从不是空的桶里把排好序的数据拼接起来。
	算法分析：
		out-place sort、stable sort
		最好情况运行时间：O(n)

基数排序：
	基本原理：按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位
	算法分析：
		stable sort、Out-place sort
		最坏情况运行时间：O((n+k)d)	最好情况运行时间：O((n+k)d)
		空间复杂度为 O(n+k)


